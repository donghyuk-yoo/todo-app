{"version":3,"sources":["components/TodoTemplate.js","components/TodoInsert.js","components/TodoListItem.js","components/TodoList.js","App.js","reportWebVitals.js","index.js"],"names":["TodoTemplate","children","className","TodoInsert","onInsert","useState","value","setValue","onChange","useCallback","e","target","onSubmit","preventDefault","placeholder","type","TodoListItem","todo","onRemove","onToggle","style","id","text","checked","cn","onClick","React","memo","TodoList","todos","rowRenderer","index","key","width","height","rowCount","length","rowHeight","list","outline","createBulkTodos","array","i","push","todoReducer","action","concat","filter","map","App","useReducer","undefined","dispatch","nextId","useRef","current","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ce9140ad.chunk.js","sourcesContent":["import React from 'react';\r\nimport './TodoTemplate.scss';\r\n\r\nconst TodoTemplate = ({ children }) => {\r\n  return (\r\n    <div className=\"TodoTemplate\">\r\n      <div className=\"app-title\">일정 관리</div>\r\n      <div className=\"content\">{children}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TodoTemplate;\r\n","import React, { useCallback, useState } from 'react';\r\nimport { MdAdd } from 'react-icons/md';\r\nimport './TodoInsert.scss';\r\n\r\nconst TodoInsert = ({ onInsert }) => {\r\n  const [value, setValue] = useState('');\r\n  // 한 번 함수 만들고 재사용\r\n  const onChange = useCallback((e) => {\r\n    setValue(e.target.value);\r\n  }, []);\r\n\r\n  const onSubmit = useCallback(\r\n    (e) => {\r\n      onInsert(value);\r\n      setValue('');\r\n      e.preventDefault();\r\n    },\r\n    [onInsert, value],\r\n  );\r\n\r\n  return (\r\n    <form className=\"TodoInsert\" onSubmit={onSubmit}>\r\n      <input value={value} onChange={onChange} placeholder=\"할 일 입력\" />\r\n      <button type=\"submit\">\r\n        <MdAdd />\r\n      </button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default TodoInsert;\r\n","import React from 'react';\r\nimport {\r\n  MdCheckBoxOutlineBlank,\r\n  MdCheckBox,\r\n  MdRemoveCircleOutline,\r\n} from 'react-icons/md';\r\nimport cn from 'classnames';\r\nimport './TodoListItem.scss';\r\n\r\nconst TodoListItem = ({ todo, onRemove, onToggle, style }) => {\r\n  const { id, text, checked } = todo;\r\n\r\n  return (\r\n    // TodoListItem-virtualized클래스 만든 이유: 테두리 및 짝수 번쨰 배경스타일 설정을 위해\r\n    <div className=\"TodoListItem-virtualized\" style={style}>\r\n      <div className=\"TodoListItem\">\r\n        <div\r\n          className={cn('checkbox', { checked })}\r\n          onClick={() => onToggle(id)}\r\n        >\r\n          {checked ? <MdCheckBox /> : <MdCheckBoxOutlineBlank />}\r\n          <div className=\"text\">{text}</div>\r\n        </div>\r\n        <div className=\"remove\" onClick={() => onRemove(id)}>\r\n          <MdRemoveCircleOutline />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\n// 컴포넌트의 props가 바뀌지 않았다면, 리렌더링하지 않음 React.memo()\r\nexport default React.memo(TodoListItem);\r\n","import React, { useCallback } from 'react';\r\nimport { List } from 'react-virtualized';\r\nimport TodoListItem from './TodoListItem';\r\nimport './TodoList.scss';\r\n\r\nconst TodoList = ({ todos, onRemove, onToggle }) => {\r\n  // react-virtualized(보이지 않는 부분은 미리 렌더링하지 않고, 그때그떄 렌더링)의\r\n  // List컴포넌트에서 각 TodoItem을 렌더링할 떄 사용하며, 이 함수를 List컴포넌트의 props로 설정해야함\r\n  const rowRenderer = useCallback(\r\n    // 함수 파라미터 index, key, style값을 객체 타입으로\r\n    ({ index, key, style }) => {\r\n      const todo = todos[index];\r\n      return (\r\n        <TodoListItem\r\n          todo={todo}\r\n          key={key}\r\n          onRemove={onRemove}\r\n          onToggle={onToggle}\r\n          style={style}\r\n        />\r\n      );\r\n    },\r\n    [onRemove, onToggle, todos],\r\n  );\r\n\r\n  return (\r\n    // <div className=\"TodoList\">\r\n    //   {todos.map((todo) => (\r\n    //     <TodoListItem\r\n    //       todo={todo}\r\n    //       key={todo.id}\r\n    //       onRemove={onRemove}\r\n    //       onToggle={onToggle}\r\n    //     />\r\n    //   ))}\r\n    // </div>\r\n    <List\r\n      className=\"TodoList\"\r\n      width={512} // 전체 크기\r\n      height={513} // 전체 높이\r\n      rowCount={todos.length} // 항목 개수\r\n      rowHeight={57} // 항목 높이\r\n      rowRenderer={rowRenderer} // 항목을 렌더링할 때 쓰는 함수\r\n      list={todos} // 배열\r\n      style={{ outline: 'none' }} // List에 기본 적용되는 outline 스타일 제거\r\n      // List 컴포넌트가 전달받은 props를 사용 자동으로 최적화해 준다.\r\n    />\r\n  );\r\n};\r\n\r\n// 파라미터가 { todos, onRemove, onToggle }일 때는 TodoList의 부모인 App이 리렌더링되는 유일한 이유가\r\n// todos 배열이 업데이트될 때 뿐이므로  TodoList는 불필요한 리렌더링이 발생하지 않으나,\r\n// 후에 추가될 App에 다른 state가 추가되어 해당 값들이 업데이트될 때는 TodoList가 불필요 리렌더링을\r\n// 할 수 있으므로 미리 최적화해 준다.\r\n// 리스트 관련 컴포넌트는 리스트와 아이템, 두가지를 최적화해 주어야 한다.\r\nexport default React.memo(TodoList);\r\n","import React, { useReducer, useCallback, useRef, useState } from 'react';\nimport TodoTemplate from './components/TodoTemplate';\nimport TodoInsert from './components/TodoInsert';\nimport TodoList from './components/TodoList';\n\nfunction createBulkTodos() {\n  const array = [];\n  for (let i = 1; i <= 2500; i++) {\n    array.push({\n      id: i,\n      text: `할 일 ${i}`,\n      checked: false,\n    });\n  }\n  return array;\n}\n\nfunction todoReducer(todos, action) {\n  switch (action.type) {\n    case 'INSERT':\n      // 불변성을 지킨 업데이트 : 아예 새로운 배열 혹은 객체를 만듦으로서, 변경 여부 추적 -> 렌더링성능 최적화 가능해짐\n      // 불변성을 지키지 않으면 객체 내부의 값이 새로워져도 변화 감지x -> React.memo에서 비교 최적화 불가능\n      return todos.concat(action.todo);\n    case 'REMOVE':\n      return todos.filter((todo) => todo.id !== action.id);\n    case 'TOGGLE':\n      return todos.map((todo) =>\n        // ...(전개 연산자)는 얉은 복사(가장 바깥쪽 값만 복사된다.), 그러므로 객체 혹은 배열은\n        // 내부의 값 또한 따로 복사해 주어야 함\n        todo.id === action.id ? { ...todo, checked: !todo.checked } : todo,\n      );\n    default:\n      return todos;\n  }\n}\n\nfunction App() {\n  // const [todos, setTodos] = useState([\n  //   {\n  //     id: 1,\n  //     text: '리액트 기초 알아보기',\n  //     checked: true,\n  //   },\n  //   {\n  //     id: 2,\n  //     text: '컴포넌트 스타일링해 보기',\n  //     checked: true,\n  //   },\n  //   {\n  //     id: 3,\n  //     text: '일정 관리 앱 만들어 보기',\n  //     checked: false,\n  //   },\n  // ]);\n\n  // 고윳값으로 사용될 id\n  // ref 사용 변수 담기\n  // const nextId = useRef(4);\n\n  // 컴포넌트 최적화 테스트\n  // 함수형 업데이트\n  // const [todos, setTodos] = useState(createBulkTodos);\n  // useReducer형 업데이트\n  // 원래 두 번째 파라미터가 초기상태 이지만, 이런식으로 두 번쨰 undefined,\n  // 세 번쨰에 초기상태 만들어주는 함수 넣을시, 컴포넌트가 맨 처음 렌더링될 때만 함수가 호출 된다.\n  const [todos, dispatch] = useReducer(todoReducer, undefined, createBulkTodos);\n\n  const nextId = useRef(2501);\n\n  // todos 배열이 바뀌었을 때만 함수 생성\n  // props로 전달해야 할 함수를 만들 때는 useCallback 사용 습관화\n  const onInsert = useCallback(\n    (text) => {\n      const todo = {\n        id: nextId,\n        text: text,\n        checked: false,\n      };\n      // 최적화전 : 새로운 상태를 이용한 업데이트\n      // setTodos(todos.concat(todo));\n      // todos배열이 바뀔 떄마다 함수가 새로 만들어지는 것 방지\n      // 최적화 : 1. 함수형 업데이트 2. useReducer\n      // 1. 함수형 업데이트\n      // setTodos((todos) => todos.concat(todo));\n      // 2. useReducer형 업데이트\n      dispatch({ type: 'INSERT', todo: todo });\n      nextId.current = nextId.current + 1;\n    },\n    // 함수형 업데이트에서 useCallback 사용할 때 두 번쨰 파라미터 넣는 배열에 값 안 넣어도 됨\n    // [todos],\n    [],\n  );\n\n  const onRemove = useCallback((id) => {\n    // 최적화 : 함수형 업데이트\n    // setTodos((todos) => todos.filter((todo) => todo.id !== id));\n    // useReducer 형 업데이트\n    dispatch({ type: 'REMOVE', id: id });\n  }, []);\n\n  const onToggle = useCallback((id) => {\n    // 최적화 : 함수형 업데이트\n    // setTodos((todos) =>\n    //   todos.map((todo) =>\n    //     todo.id === id ? { ...todo, checked: !todo.checked } : todo,\n    //   ),\n    // );\n    // useReducer 형 업데이트\n    dispatch({ type: 'TOGGLE', id: id });\n  }, []);\n\n  return (\n    <TodoTemplate>\n      <TodoInsert onInsert={onInsert} />\n      <TodoList todos={todos} onRemove={onRemove} onToggle={onToggle} />\n    </TodoTemplate>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}